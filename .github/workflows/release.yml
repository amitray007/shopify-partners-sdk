name: Build and Publish Python Package

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: false
        default: 'auto'
        type: choice
        options:
          - auto
          - patch
          - minor
          - major
      skip_version:
        description: 'Skip version bump'
        required: false
        default: false
        type: boolean
      skip_publish:
        description: 'Skip publishing to PyPI'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  check-skip:
    runs-on: ubuntu-latest
    outputs:
      skip: ${{ steps.check.outputs.skip }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check for skip CI
        id: check
        run: |
          COMMIT_MSG=$(git log --format=%B -n 1 HEAD)
          if [[ "$COMMIT_MSG" == *"[skip ci]"* ]] || [[ "$COMMIT_MSG" == *"[ci skip]"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

  version:
    needs: [check-skip]
    if: needs.check-skip.outputs.skip == 'false' && github.event.inputs.skip_version != 'true'
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.version.outputs.new_version }}
      version_changed: ${{ steps.version.outputs.version_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(poetry version -s)
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Determine version bump type
        id: bump_type
        run: |
          if [[ "${{ github.event.inputs.version_type }}" != "auto" ]] && [[ -n "${{ github.event.inputs.version_type }}" ]]; then
            echo "type=${{ github.event.inputs.version_type }}" >> $GITHUB_OUTPUT
          else
            # Auto-detect from commit messages
            COMMIT_MSG=$(git log --format=%B -n 1 HEAD)
            if [[ "$COMMIT_MSG" == *"BREAKING CHANGE"* ]] || [[ "$COMMIT_MSG" == *"breaking change"* ]]; then
              echo "type=major" >> $GITHUB_OUTPUT
            elif [[ "$COMMIT_MSG" == *"feat:"* ]] || [[ "$COMMIT_MSG" == *"feature:"* ]]; then
              echo "type=minor" >> $GITHUB_OUTPUT
            else
              echo "type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Bump version
        id: version
        run: |
          BUMP_TYPE="${{ steps.bump_type.outputs.type }}"
          poetry version $BUMP_TYPE
          NEW_VERSION=$(poetry version -s)
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          if [[ "$NEW_VERSION" != "${{ steps.current_version.outputs.current_version }}" ]]; then
            echo "version_changed=true" >> $GITHUB_OUTPUT
          else
            echo "version_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if version already exists
        if: steps.version.outputs.version_changed == 'true'
        run: |
          if git tag | grep -q "v${{ steps.version.outputs.new_version }}"; then
            echo "Version v${{ steps.version.outputs.new_version }} already exists. Skipping."
            exit 1
          fi

      - name: Update version.py
        if: steps.version.outputs.version_changed == 'true'
        run: |
          echo "__version__ = \"${{ steps.version.outputs.new_version }}\"" > src/shopify_partners_sdk/version.py

      - name: Commit version bump
        if: steps.version.outputs.version_changed == 'true'
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
          git add pyproject.toml src/shopify_partners_sdk/version.py
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }} [skip ci]"
          git push

      - name: Create tag
        if: steps.version.outputs.version_changed == 'true'
        run: |
          git tag v${{ steps.version.outputs.new_version }}
          git push origin v${{ steps.version.outputs.new_version }}

  pypi-publish:
    name: upload release to PyPI
    needs: [check-skip, version]
    if: needs.check-skip.outputs.skip == 'false' && needs.version.outputs.version_changed == 'true' && github.event.inputs.skip_publish != 'true'
    runs-on: ubuntu-latest
    environment: pypi
    permissions:
      # IMPORTANT: this permission is mandatory for Trusted Publishing
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Poetry
        uses: snok/install-poetry@v1

      - name: Build package
        run: poetry build

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  create-release:
    needs: [version, pypi-publish]
    if: needs.version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [[ -n "$LAST_TAG" ]]; then
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --oneline --pretty=format:"- %s" | head -20)
          else
            CHANGELOG=$(git log --oneline --pretty=format:"- %s" | head -20)
          fi

          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.version.outputs.new_version }}
          name: v${{ needs.version.outputs.new_version }}
          body: |
            ## Changes in v${{ needs.version.outputs.new_version }}

            ${{ steps.changelog.outputs.changelog }}

            ## Installation

            ```bash
            pip install shopify-partners-sdk==${{ needs.version.outputs.new_version }}
            ```
          draft: false
          prerelease: ${{ contains(needs.version.outputs.new_version, 'rc') || contains(needs.version.outputs.new_version, 'alpha') || contains(needs.version.outputs.new_version, 'beta') }}
